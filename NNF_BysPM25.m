function [y1] = NNF_BysPM25(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 05-May-2020 14:46:57.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx11 matrix, input #1
% and returns:
%   y = Qx1 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [4;5;0.2;0;2;0;0.1;996.6;0;-4;10];
x1_step1.gain = [0.00809716599190283;0.00400801603206413;0.740740740740741;0.0121212121212121;0.00181653042688465;0.00826446280991736;0.5;0.0461893764434179;0.00640820249919897;0.0476190476190476;0.0222222222222222];
x1_step1.ymin = -1;

% Layer 1
b1 = [-0.22636211586771520787;-0.56450481931684926007;0.50159513390503640551;-0.036141294911040823534;0.19103352198342221646;0.74313797075282150839;0.43220814921271860642;0.02462029969540206753;-0.97244147480031162267;-0.01284886353567533078;-0.10145723212519844325;-0.16261841164426199535;-0.22151270787198429346];
IW1_1 = [-0.028077456443895469629 1.5694621363774969858 -0.57809510294283628085 0.39934739056920304234 -0.28568233302133999585 -0.62514593824710174008 -0.25028135636443049616 0.13092722687358920863 -0.44924228829650147965 1.2221701767015407114 0.087211805958094301694;0.81541779957214699515 -0.37406466511015562526 -0.27818065654460705227 -0.0092349768273529281304 0.88562267625346879907 -0.35391350558430473283 0.43111094910570785244 0.00080136597979485176078 -0.17649033288801119213 -0.045602112299482973345 1.3813914482372970927;-0.099962059416046813998 1.6078574513857486483 0.46002016900713071923 0.37533706912882786044 -0.31481230771963769621 0.091212799582090109407 0.061653472722011951057 -0.13749850949757949636 -0.87133454167694290859 0.064441510992464270946 -0.60148129368838343378;0.84832755145369531657 -1.2179361959771555224 -0.18457633315832891463 -0.23398760139417595916 0.11597319527521117444 -0.25301017904254397006 -0.26796050166458840192 0.2157301013081835972 -0.03578357321772975691 -1.0506047213133495877 0.42666994714776529385;-0.27607993812310516191 1.2202289692090209083 -0.024588012925544230902 0.1525959236063979263 -0.37387835860424528667 -0.3207659467832491007 -0.033089923076345097164 -0.09927239879450175386 -0.16757543916468412015 0.049739585316675959115 0.14724298654157061406;-0.18428261045482507985 0.9964440691345191059 0.95910068250372548793 -0.042279501202855812592 -0.11264580582063199454 0.16824964948280032861 -0.19188302797769574148 0.01088186862560501858 0.12818166213018553079 0.40971374100047130984 -0.26620540864163722006;0.2425367856675878786 -1.2482665421387895144 0.54468984884452653628 -0.085515070280960447935 -0.85180525478705304554 0.60026467841097885803 -0.44466799187804051385 -0.088083319135908069719 0.20065943529702748305 -0.22656677614567274914 -1.7367712745704275701;-1.8161300782929006292 1.2420291846181692463 0.25172666576946700623 0.034183575458107594292 -0.20318979306441561916 1.057767542050282783 -0.12864452218582142495 0.045773005237815814206 0.0085583373644452006429 -0.043366606891166468996 -0.12775644819490772353;-0.33699713760798771789 -0.22100400965485422766 0.17154889412478149802 0.24396233248882950861 0.96614787624080977757 -0.68207046106081115067 -0.54317671375104858988 0.85583568333687098928 -1.3839144013930004817 -0.019839468281912287645 -0.96384865739449143707;-0.013438480354244823622 0.25940732417728312731 -0.75976822439559033029 -0.17713553614039190265 0.6142802550660730887 0.47125984577113089191 0.57937502368126725383 -0.033708056436567039593 0.14622812648991231899 0.026786597336642684747 0.36089487504930339856;-0.81309436307279159273 0.69796799660214203787 -0.65494744139393901161 -0.13045969062564111152 0.085387884545996828312 -0.32267677452522625092 -0.19342094612672874887 0.056893265531796091694 0.016845630820718583698 -0.65004539462051547094 0.44372542111346413574;1.5547264393324626841 -0.13139869559773031948 -1.2638777682229602739 0.34584481722565652007 0.51441341281149699505 -0.61528022215406941164 -0.30298094662080599093 0.2849587922022239761 -0.50657220276808112569 1.2970566144254143115 0.099528505856398968854;2.7821825053666029426 -3.0094084744973157441 -0.14104937868636890919 -0.025403869776300738031 0.55410222821033783269 -1.0828759010642436955 0.089411615666520352641 0.012736609858470422652 -0.036797743830909147855 -0.14718863924647554442 -0.010333402220241641109];

% Layer 2
b2 = -0.61197401482905722236;
LW2_1 = [-1.2982005703128058904 -1.6371681905118526945 0.41358213606299265575 -0.94832012622420669423 1.5185326939800467549 1.3508666577063563885 -1.0176628114784025403 2.1646533652082444732 -0.23028750726962432527 0.87010251310981245876 1.5504162367233151887 1.0136584962428791812 2.1509785757858268518];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.00930232558139535;
y1_step1.xoffset = 1;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
