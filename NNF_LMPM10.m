function [y1] = NNF_LMPM10(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 05-May-2020 23:01:39.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx11 matrix, input #1
% and returns:
%   y = Qx1 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [4;5;0.2;0;2;0;0.1;996.6;0;-4;10];
x1_step1.gain = [0.00809716599190283;0.00400801603206413;0.740740740740741;0.0121212121212121;0.00181653042688465;0.00826446280991736;0.5;0.0461893764434179;0.00640820249919897;0.0476190476190476;0.0222222222222222];
x1_step1.ymin = -1;

% Layer 1
b1 = [2.0712851238290306277;6.9736178825411947457;-2.918751883309013806;-1.7489754964194714759;10.407530716541144145;1.2300058897308743244;1.333734539752209125;2.056591817916638476;-7.9816911151707135019;-2.489349341268292104];
IW1_1 = [0.10179991689179190839 0.14739504695397570577 -1.4613248637165519028 0.54575304755625364539 1.4758368876311225293 -0.56505504610963319667 -0.35024323975187526825 2.1476195655808769658 -0.43651501240579998475 0.38381892160730107788 -2.17770335410970306;0.24310321740562187975 0.11718745522150476879 -1.8828480452976885662 0.25543925675128781316 7.1989576974909113005 -0.3128107259079621616 -0.21126783328647369409 -0.14076629498753337466 0.21016224890796775249 -0.087404105111121149774 0.80435486376446585499;-1.1903162497464798708 -6.4706327540919508223 0.12201086830930492344 2.6163412684371336603 -8.1278148527405864598 -1.2818840890863560933 1.1226238348852892734 10.864688514677665054 0.39257999917880115337 2.861698192584699374 0.38618244767291926012;-4.6423539628211099028 5.4634054625879873157 -1.8387093406807004659 1.982474359371020789 0.00065123289140681106524 -2.5264691755718797772 0.086763780171127416474 -0.45260525253824973602 -0.095228600748791164543 0.62224858056818865837 -0.26510545158513043607;2.416043475351277614 -3.138525689294376253 3.2329957613541351336 2.2027683536186639657 8.4765242932475626247 -1.2008390488943465613 1.2185083843533885961 1.6286940446865756371 -0.58304942773517631771 -1.3960798732858135107 -0.47361343812917572338;1.2239875410072786899 -3.0158011641143129822 0.6069113347185400853 -1.1123073303736425999 3.6305177984690049087 2.4311061625864205382 -2.6879940827455865993 -3.7594044635411498767 -0.90696811565754664741 0.5098461191445140539 1.3411748194930548372;1.8163876378893095698 -4.0368984391173379223 1.6518676075376685919 -1.0535510948174149348 3.8237026043761610516 3.1957277173528573222 -3.6690817519607095143 -4.8726662540434109161 -1.1990329767643570502 -0.37282947997580617727 1.070675238515173433;-4.5772954045488214447 7.0067895920217191374 -1.6844364603261419155 -1.8333001510743764939 2.1083710505663448842 -0.62357906405725438415 1.3651553844752379874 0.9317638357752278111 4.4376453900050893964 -1.2753656743389745198 0.9859626759952876407;-1.3680743368584309394 0.76714444353745103733 -0.94183194629707434054 -0.076924903328603272401 -7.2581207014412392198 -0.23169957356035511542 -0.076120292593000155046 0.16021134014471782869 0.127886718263782867 0.26593534672751817372 0.36447973119981191825;1.7321816866871191376 -4.5944124577055118763 8.6181539157539166496 1.6205700427840765698 -9.23279669868758468 -3.0608521292751755816 0.49626578784715535964 -0.70244726707063587234 -5.5522640996141996439 7.770661056723566773 1.9218897981199971614];

% Layer 2
b2 = -0.87654082391940391084;
LW2_1 = [0.047370806102609901156 0.11134709974927392562 -0.010124329993152117457 0.052006564450711834091 -0.054836375647938140343 -0.15846045785670065387 0.12856008534862706227 0.033865342766355180371 -0.2833207594657224937 0.026723797532689708839];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.00203458799593082;
y1_step1.xoffset = 2;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
